from flask import Flask, render_template
import requests
import pandas as pd
import numpy as np
from datetime import timedelta, datetime
from bokeh.plotting import figure
from bokeh.models import ColumnDataSource, Grid, LinearAxis, Plot, VBar
from bokeh.models import WMTSTileSource, HoverTool, NumeralTickFormatter
from bokeh.models import CustomJS, DateSlider, RadioButtonGroup
from bokeh.resources import INLINE
from bokeh.io import curdoc
from bokeh.embed import components
from bokeh.layouts import gridplot, column



static_dict = {"LTLA CODE":[	"E06000055",	"E06000056",	"E06000032",	"E07000008",	"E07000009",	"E07000010",	"E07000011",	"E07000012",	"E06000031",	"E07000066",	"E07000067",	"E07000068",	"E07000069",	"E07000070",	"E07000071",	"E07000072",	"E07000073",	"E07000074",	"E07000075",	"E07000076",	"E07000077",	"E06000033",	"E06000034",	"E06000019",	"E07000095",	"E07000096",	"E07000242",	"E07000098",	"E07000099",	"E07000240",	"E07000243",	"E07000102",	"E07000103",	"E07000241",	"E07000143",	"E07000144",	"E07000145",	"E07000146",	"E07000147",	"E07000148",	"E07000149",	"E07000200",	"E07000201",	"E07000202",	"E07000203",	"E07000204",	"E07000205",	"E07000206",	"E07000244",	"E07000245",	"E06000015",	"E07000032",	"E07000033",	"E07000034",	"E07000035",	"E07000036",	"E07000037",	"E07000038",	"E07000039",	"E06000016",	"E07000129",	"E07000130",	"E07000131",	"E07000132",	"E07000133",	"E07000134",	"E07000135",	"E07000136",	"E07000137",	"E07000138",	"E07000139",	"E07000140",	"E07000141",	"E07000142",	"E06000012",	"E06000013",	"E07000150",	"E07000151",	"E07000152",	"E07000153",	"E07000154",	"E07000155",	"E07000156",	"E06000061",	"E06000062",	"E06000018",	"E07000170",	"E07000171",	"E07000172",	"E07000173",	"E07000174",	"E07000175",	"E07000176",	"E06000017",	"E09000007",	"E09000001",	"E09000012",	"E09000013",	"E09000014",	"E09000019",	"E09000020",	"E09000022",	"E09000023",	"E09000025",	"E09000028",	"E09000030",	"E09000032",	"E09000033",	"E09000002",	"E09000003",	"E09000004",	"E09000005",	"E09000006",	"E09000008",	"E09000009",	"E09000010",	"E09000011",	"E09000015",	"E09000016",	"E09000017",	"E09000018",	"E09000021",	"E09000024",	"E09000026",	"E09000027",	"E09000029",	"E09000031",	"E06000047",	"E06000005",	"E06000001",	"E06000004",	"E06000057",	"E08000037",	"E08000021",	"E08000022",	"E08000023",	"E08000024",	"E06000049",	"E06000050",	"E06000006",	"E06000007",	"E07000026",	"E07000027",	"E07000028",	"E07000029",	"E07000030",	"E07000031",	"E08000001",	"E08000002",	"E08000003",	"E08000004",	"E08000005",	"E08000006",	"E08000007",	"E08000008",	"E08000009",	"E08000010",	"E06000008",	"E06000009",	"E07000117",	"E07000118",	"E07000119",	"E07000120",	"E07000121",	"E07000122",	"E07000123",	"E07000124",	"E07000125",	"E07000126",	"E07000127",	"E07000128",	"E08000011",	"E08000012",	"E08000014",	"E08000013",	"E08000015",	"N09000003",	"N09000007",	"N09000001",	"N09000004",	"N09000008",	"N09000010",	"N09000002",	"N09000011",	"N09000006",	"N09000005",	"N09000009",	"S12000033",	"S12000034",	"S12000041",	"S12000035",	"S12000005",	"S12000013",	"S12000006",	"S12000042",	"S12000008",	"S12000045",	"S12000010",	"S12000011",	"S12000036",	"S12000014",	"S12000047",	"S12000049",	"S12000017",	"S12000018",	"S12000019",	"S12000020",	"S12000021",	"S12000050",	"S12000023",	"S12000048",	"S12000038",	"S12000026",	"S12000027",	"S12000028",	"S12000029",	"S12000030",	"S12000039",	"S12000040",	"E06000036",	"E06000038",	"E06000039",	"E06000037",	"E06000040",	"E06000041",	"E07000004",	"E07000005",	"E07000006",	"E07000007",	"E06000042",	"E06000060",	"E06000043",	"E07000061",	"E07000062",	"E07000063",	"E07000064",	"E07000065",	"E07000084",	"E07000085",	"E07000086",	"E07000087",	"E07000088",	"E07000089",	"E07000090",	"E07000091",	"E07000092",	"E07000093",	"E07000094",	"E06000044",	"E06000045",	"E06000046",	"E07000105",	"E07000106",	"E07000107",	"E07000108",	"E07000109",	"E07000110",	"E07000111",	"E07000112",	"E07000113",	"E07000114",	"E07000115",	"E07000116",	"E06000035",	"E07000177",	"E07000178",	"E07000179",	"E07000180",	"E07000181",	"E07000207",	"E07000208",	"E07000209",	"E07000210",	"E07000211",	"E07000212",	"E07000213",	"E07000214",	"E07000215",	"E07000216",	"E07000217",	"E07000223",	"E07000224",	"E07000225",	"E07000226",	"E07000227",	"E07000228",	"E07000229",	"E06000023",	"E06000052",	"E06000053",	"E07000040",	"E07000041",	"E07000042",	"E07000043",	"E07000044",	"E07000045",	"E07000046",	"E07000047",	"E06000026",	"E06000027",	"E06000028",	"E07000048",	"E07000049",	"E07000050",	"E07000051",	"E07000052",	"E07000053",	"E06000029",	"E06000058",	"E06000059",	"E07000078",	"E07000079",	"E07000080",	"E07000081",	"E07000082",	"E07000083",	"E06000025",	"E06000022",	"E06000024",	"E07000187",	"E07000188",	"E07000189",	"E07000190",	"E07000191",	"E07000246",	"E06000030",	"E06000054",	"W06000003",	"W06000004",	"W06000005",	"W06000006",	"W06000010",	"W06000008",	"W06000009",	"W06000018",	"W06000019",	"W06000022",	"W06000021",	"W06000020",	"W06000001",	"W06000002",	"W06000024",	"W06000016",	"W06000013",	"W06000023",	"W06000015",	"W06000014",	"W06000011",	"W06000012",	"E06000051",	"E06000020",	"E07000192",	"E07000193",	"E07000194",	"E07000195",	"E07000196",	"E07000197",	"E07000198",	"E07000199",	"E06000021",	"E07000218",	"E07000219",	"E07000220",	"E07000221",	"E07000222",	"E08000025",	"E08000026",	"E08000027",	"E08000028",	"E08000029",	"E08000030",	"E08000031",	"E07000234",	"E07000235",	"E07000236",	"E07000237",	"E07000238",	"E07000239",	"E06000011",	"E06000010",	"E07000163",	"E07000164",	"E07000165",	"E06000002",	"E06000003",	"E07000166",	"E07000167",	"E07000168",	"E07000169",	"E06000014",	"E08000016",	"E08000017",	"E08000018",	"E08000019",	"E08000032",	"E08000033",	"E08000034",	"E08000035",	"E08000036",	],
    "LOWER TIER LOCAL AUTHORITY":[	"Bedford",	"Central Bedfordshire",	"Luton",	"Cambridge",	"East Cambridgeshire",	"Fenland",	"Huntingdonshire",	"South Cambridgeshire",	"Peterborough",	"Basildon",	"Braintree",	"Brentwood",	"Castle Point",	"Chelmsford",	"Colchester",	"Epping Forest",	"Harlow",	"Maldon",	"Rochford",	"Tendring",	"Uttlesford",	"Southend-on-Sea",	"Thurrock",	"Herefordshire, County of",	"Broxbourne",	"Dacorum",	"East Hertfordshire",	"Hertsmere",	"North Hertfordshire",	"St Albans",	"Stevenage",	"Three Rivers",	"Watford",	"Welwyn Hatfield",	"Breckland",	"Broadland",	"Great Yarmouth",	"King's Lynn and West Norfolk",	"North Norfolk",	"Norwich",	"South Norfolk",	"Babergh",	"Forest Heath",	"Ipswich",	"Mid Suffolk",	"St Edmundsbury",	"Suffolk Coastal",	"Waveney",	"East Suffolk",	"West Suffolk",	"Derby",	"Amber Valley",	"Bolsover",	"Chesterfield",	"Derbyshire Dales",	"Erewash",	"High Peak",	"North East Derbyshire",	"South Derbyshire",	"Leicester",	"Blaby",	"Charnwood",	"Harborough",	"Hinckley and Bosworth",	"Melton",	"North West Leicestershire",	"Oadby and Wigston",	"Boston",	"East Lindsey",	"Lincoln",	"North Kesteven",	"South Holland",	"South Kesteven",	"West Lindsey",	"North East Lincolnshire",	"North Lincolnshire",	"Corby",	"Daventry",	"East Northamptonshire",	"Kettering",	"Northampton",	"South Northamptonshire",	"Wellingborough",	"North Northamptonshireï¿½",	"West Northamptonshireï¿½",	"Nottingham",	"Ashfield",	"Bassetlaw",	"Broxtowe",	"Gedling",	"Mansfield",	"Newark and Sherwood",	"Rushcliffe",	"Rutland",	"Camden",	"City of London",	"Hackney",	"Hammersmith and Fulham",	"Haringey",	"Islington",	"Kensington and Chelsea",	"Lambeth",	"Lewisham",	"Newham",	"Southwark",	"Tower Hamlets",	"Wandsworth",	"Westminster",	"Barking and Dagenham",	"Barnet",	"Bexley",	"Brent",	"Bromley",	"Croydon",	"Ealing",	"Enfield",	"Greenwich",	"Harrow",	"Havering",	"Hillingdon",	"Hounslow",	"Kingston upon Thames",	"Merton",	"Redbridge",	"Richmond upon Thames",	"Sutton",	"Waltham Forest",	"County Durham",	"Darlington",	"Hartlepool",	"Stockton-on-Tees",	"Northumberland",	"Gateshead",	"Newcastle upon Tyne",	"North Tyneside",	"South Tyneside",	"Sunderland",	"Cheshire East",	"Cheshire West and Chester",	"Halton",	"Warrington",	"Allerdale",	"Barrow-in-Furness",	"Carlisle",	"Copeland",	"Eden",	"South Lakeland",	"Bolton",	"Bury",	"Manchester",	"Oldham",	"Rochdale",	"Salford",	"Stockport",	"Tameside",	"Trafford",	"Wigan",	"Blackburn with Darwen",	"Blackpool",	"Burnley",	"Chorley",	"Fylde",	"Hyndburn",	"Lancaster",	"Pendle",	"Preston",	"Ribble Valley",	"Rossendale",	"South Ribble",	"West Lancashire",	"Wyre",	"Knowsley",	"Liverpool",	"Sefton",	"St. Helens",	"Wirral",	"Belfast",	"Lisburn and Castlereagh",	"Antrim and Newtownabbey",	"Causeway Coast and Glens",	"Mid and East Antrim",	"Newry, Mourne and Down",	"Armagh City, Banbridge and Craigavon",	"Ards and North Down",	"Fermanagh and Omagh",	"Derry City and Strabane",	"Mid Ulster",	"Aberdeen City",	"Aberdeenshire",	"Angus",	"Argyll and Bute",	"Clackmannanshire",	"Comhairle nan Eilean Siar",	"Dumfries and Galloway",	"Dundee City",	"East Ayrshire",	"East Dunbartonshire",	"East Lothian",	"East Renfrewshire",	"City of Edinburgh",	"Falkirk",	"Fife",	"Glasgow City",	"Highland",	"Inverclyde",	"Midlothian",	"Moray",	"North Ayrshire",	"North Lanarkshire",	"Orkney Islands",	"Perth and Kinross",	"Renfrewshire",	"Scottish Borders",	"Shetland Islands",	"South Ayrshire",	"South Lanarkshire",	"Stirling",	"West Dunbartonshire",	"West Lothian",	"Bracknell Forest",	"Reading",	"Slough",	"West Berkshire",	"Windsor and Maidenhead",	"Wokingham",	"Aylesbury Vale",	"Chiltern",	"South Bucks",	"Wycombe",	"Milton Keynes",	"Buckinghamshire",	"Brighton and Hove",	"Eastbourne",	"Hastings",	"Lewes",	"Rother",	"Wealden",	"Basingstoke and Deane",	"East Hampshire",	"Eastleigh",	"Fareham",	"Gosport",	"Hart",	"Havant",	"New Forest",	"Rushmoor",	"Test Valley",	"Winchester",	"Portsmouth",	"Southampton",	"Isle of Wight",	"Ashford",	"Canterbury",	"Dartford",	"Dover",	"Gravesham",	"Maidstone",	"Sevenoaks",	"Shepway",	"Swale",	"Thanet",	"Tonbridge and Malling",	"Tunbridge Wells",	"Medway",	"Cherwell",	"Oxford",	"South Oxfordshire",	"Vale of White Horse",	"West Oxfordshire",	"Elmbridge",	"Epsom and Ewell",	"Guildford",	"Mole Valley",	"Reigate and Banstead",	"Runnymede",	"Spelthorne",	"Surrey Heath",	"Tandridge",	"Waverley",	"Woking",	"Adur",	"Arun",	"Chichester",	"Crawley",	"Horsham",	"Mid Sussex",	"Worthing",	"Bristol, City of",	"Cornwall",	"Isles of Scilly",	"East Devon",	"Exeter",	"Mid Devon",	"North Devon",	"South Hams",	"Teignbridge",	"Torridge",	"West Devon",	"Plymouth",	"Torbay",	"Bournemouth",	"Christchurch",	"East Dorset",	"North Dorset",	"Purbeck",	"West Dorset",	"Weymouth and Portland",	"Poole",	"Bournemouth, Christchurch and Poole",	"Dorset",	"Cheltenham",	"Cotswold",	"Forest of Dean",	"Gloucester",	"Stroud",	"Tewkesbury",	"South Gloucestershire",	"Bath and North East Somerset",	"North Somerset",	"Mendip",	"Sedgemoor",	"South Somerset",	"Taunton Deane",	"West Somerset",	"Somerset West and Taunton",	"Swindon",	"Wiltshire",	"Conwy",	"Denbighshire",	"Flintshire",	"Wrexham",	"Carmarthenshire",	"Ceredigion",	"Pembrokeshire",	"Caerphilly",	"Blaenau Gwent",	"Newport",	"Monmouthshire",	"Torfaen",	"Isle of Anglesey",	"Gwynedd",	"Merthyr Tydfil",	"Rhondda Cynon Taf",	"Bridgend",	"Powys",	"Cardiff",	"Vale of Glamorgan",	"Swansea",	"Neath Port Talbot",	"Shropshire",	"Telford and Wrekin",	"Cannock Chase",	"East Staffordshire",	"Lichfield",	"Newcastle-under-Lyme",	"South Staffordshire",	"Stafford",	"Staffordshire Moorlands",	"Tamworth",	"Stoke-on-Trent",	"North Warwickshire",	"Nuneaton and Bedworth",	"Rugby",	"Stratford-on-Avon",	"Warwick",	"Birmingham",	"Coventry",	"Dudley",	"Sandwell",	"Solihull",	"Walsall",	"Wolverhampton",	"Bromsgrove",	"Malvern Hills",	"Redditch",	"Worcester",	"Wychavon",	"Wyre Forest",	"East Riding of Yorkshire",	"Kingston upon Hull, City of",	"Craven",	"Hambleton",	"Harrogate",	"Middlesbrough",	"Redcar and Cleveland",	"Richmondshire",	"Ryedale",	"Scarborough",	"Selby",	"York",	"Barnsley",	"Doncaster",	"Rotherham",	"Sheffield",	"Bradford",	"Calderdale",	"Kirklees",	"Leeds",	"Wakefield",	],
    "COUNTY":[	"Bedfordshire",	"Bedfordshire",	"Bedfordshire",	"Cambridgeshire",	"Cambridgeshire",	"Cambridgeshire",	"Cambridgeshire",	"Cambridgeshire",	"Cambridgeshire",	"Essex",	"Essex",	"Essex",	"Essex",	"Essex",	"Essex",	"Essex",	"Essex",	"Essex",	"Essex",	"Essex",	"Essex",	"Essex",	"Essex",	"Herefordshire",	"Hertfordshire",	"Hertfordshire",	"Hertfordshire",	"Hertfordshire",	"Hertfordshire",	"Hertfordshire",	"Hertfordshire",	"Hertfordshire",	"Hertfordshire",	"Hertfordshire",	"Norfolk",	"Norfolk",	"Norfolk",	"Norfolk",	"Norfolk",	"Norfolk",	"Norfolk",	"Suffolk",	"Suffolk",	"Suffolk",	"Suffolk",	"Suffolk",	"Suffolk",	"Suffolk",	"Suffolk",	"Suffolk",	"Derbyshire",	"Derbyshire",	"Derbyshire",	"Derbyshire",	"Derbyshire",	"Derbyshire",	"Derbyshire",	"Derbyshire",	"Derbyshire",	"Leicestershire",	"Leicestershire",	"Leicestershire",	"Leicestershire",	"Leicestershire",	"Leicestershire",	"Leicestershire",	"Leicestershire",	"Lincolnshire",	"Lincolnshire",	"Lincolnshire",	"Lincolnshire",	"Lincolnshire",	"Lincolnshire",	"Lincolnshire",	"Lincolnshire",	"Lincolnshire",	"Northamptonshire",	"Northamptonshire",	"Northamptonshire",	"Northamptonshire",	"Northamptonshire",	"Northamptonshire",	"Northamptonshire",	"Northamptonshire",	"Northamptonshire",	"Nottinghamshire",	"Nottinghamshire",	"Nottinghamshire",	"Nottinghamshire",	"Nottinghamshire",	"Nottinghamshire",	"Nottinghamshire",	"Nottinghamshire",	"Rutland",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"County Durham",	"County Durham",	"County Durham",	"County Durham",	"Northumberland",	"Tyne and Wear",	"Tyne and Wear",	"Tyne and Wear",	"Tyne and Wear",	"Tyne and Wear",	"Cheshire",	"Cheshire",	"Cheshire",	"Cheshire",	"Cumbria",	"Cumbria",	"Cumbria",	"Cumbria",	"Cumbria",	"Cumbria",	"Greater Manchester",	"Greater Manchester",	"Greater Manchester",	"Greater Manchester",	"Greater Manchester",	"Greater Manchester",	"Greater Manchester",	"Greater Manchester",	"Greater Manchester",	"Greater Manchester",	"Lancashire",	"Lancashire",	"Lancashire",	"Lancashire",	"Lancashire",	"Lancashire",	"Lancashire",	"Lancashire",	"Lancashire",	"Lancashire",	"Lancashire",	"Lancashire",	"Lancashire",	"Lancashire",	"Merseyside",	"Merseyside",	"Merseyside",	"Merseyside",	"Merseyside",	"County Antrim",	"County Antrim",	"County Antrim",	"County Antrim",	"County Antrim",	"County Armagh",	"County Armagh",	"County Down",	"County Fermanagh",	"County Londonderry",	"County Tyrone",	"Aberdeen",	"Aberdeenshire",	"Angus",	"Argyll and Bute",	"Clackmannanshire",	"Comhairle nan Eilean Siar",	"Dumfries and Galloway",	"Dundee",	"East Ayrshire",	"East Dunbartonshire",	"East Lothian",	"East Renfrewshire",	"Edinburgh",	"Falkirk",	"Fife",	"Glasgow",	"Highland",	"Inverclyde",	"Midlothian",	"Moray",	"North Ayrshire",	"North Lanarkshire",	"Orkney Islands",	"Perth and Kinross",	"Renfrewshire",	"Scottish Borders",	"Shetland Islands",	"South Ayrshire",	"South Lanarkshire",	"Stirlingshire",	"West Dunbartonshire",	"West Lothian",	"Berkshire",	"Berkshire",	"Berkshire",	"Berkshire",	"Berkshire",	"Berkshire",	"Buckinghamshire",	"Buckinghamshire",	"Buckinghamshire",	"Buckinghamshire",	"Buckinghamshire",	"Buckinghamshire",	"East Sussex",	"East Sussex",	"East Sussex",	"East Sussex",	"East Sussex",	"East Sussex",	"Hampshire",	"Hampshire",	"Hampshire",	"Hampshire",	"Hampshire",	"Hampshire",	"Hampshire",	"Hampshire",	"Hampshire",	"Hampshire",	"Hampshire",	"Hampshire",	"Hampshire",	"Isle of Wight",	"Kent",	"Kent",	"Kent",	"Kent",	"Kent",	"Kent",	"Kent",	"Kent",	"Kent",	"Kent",	"Kent",	"Kent",	"Kent",	"Oxfordshire",	"Oxfordshire",	"Oxfordshire",	"Oxfordshire",	"Oxfordshire",	"Surrey",	"Surrey",	"Surrey",	"Surrey",	"Surrey",	"Surrey",	"Surrey",	"Surrey",	"Surrey",	"Surrey",	"Surrey",	"West Sussex",	"West Sussex",	"West Sussex",	"West Sussex",	"West Sussex",	"West Sussex",	"West Sussex",	"Bristol",	"Cornwall",	"Cornwall",	"Devon",	"Devon",	"Devon",	"Devon",	"Devon",	"Devon",	"Devon",	"Devon",	"Devon",	"Devon",	"Dorset",	"Dorset",	"Dorset",	"Dorset",	"Dorset",	"Dorset",	"Dorset",	"Dorset",	"Dorset",	"Dorset",	"Gloucestershire",	"Gloucestershire",	"Gloucestershire",	"Gloucestershire",	"Gloucestershire",	"Gloucestershire",	"Gloucestershire",	"Somerset",	"Somerset",	"Somerset",	"Somerset",	"Somerset",	"Somerset",	"Somerset",	"Somerset",	"Wiltshire",	"Wiltshire",	"Clwyd",	"Clwyd",	"Clwyd",	"Clwyd",	"Dyfed",	"Dyfed",	"Dyfed",	"Gwent",	"Gwent",	"Gwent",	"Gwent",	"Gwent",	"Gwynedd",	"Gwynedd",	"Mid Glamorgan",	"Mid Glamorgan",	"Mid Glamorgan",	"Powys",	"South Glamorgan",	"South Glamorgan",	"West Glamorgan",	"West Glamorgan",	"Shropshire",	"Shropshire",	"Staffordshire",	"Staffordshire",	"Staffordshire",	"Staffordshire",	"Staffordshire",	"Staffordshire",	"Staffordshire",	"Staffordshire",	"Staffordshire",	"Warwickshire",	"Warwickshire",	"Warwickshire",	"Warwickshire",	"Warwickshire",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"Worcestershire",	"Worcestershire",	"Worcestershire",	"Worcestershire",	"Worcestershire",	"Worcestershire",	"East Riding of Yorkshire",	"East Riding of Yorkshire",	"North Yorkshire",	"North Yorkshire",	"North Yorkshire",	"North Yorkshire",	"North Yorkshire",	"North Yorkshire",	"North Yorkshire",	"North Yorkshire",	"North Yorkshire",	"North Yorkshire",	"South Yorkshire",	"South Yorkshire",	"South Yorkshire",	"South Yorkshire",	"West Yorkshire",	"West Yorkshire",	"West Yorkshire",	"West Yorkshire",	"West Yorkshire",	],
    "COUNTY POP":[	669338,	669338,	669338,	852523,	852523,	852523,	852523,	852523,	852523,	1832752,	1832752,	1832752,	1832752,	1832752,	1832752,	1832752,	1832752,	1832752,	1832752,	1832752,	1832752,	1832752,	1832752,	192107,	1184365,	1184365,	1184365,	1184365,	1184365,	1184365,	1184365,	1184365,	1184365,	1184365,	903680,	903680,	903680,	903680,	903680,	903680,	903680,	758556,	758556,	758556,	758556,	758556,	758556,	758556,	758556,	758556,	1053316,	1053316,	1053316,	1053316,	1053316,	1053316,	1053316,	1053316,	1053316,	1053486,	1053486,	1053486,	1053486,	1053486,	1053486,	1053486,	1053486,	1087659,	1087659,	1087659,	1087659,	1087659,	1087659,	1087659,	1087659,	1087659,	747622,	747622,	747622,	747622,	747622,	747622,	747622,	747622,	747622,	1154195,	1154195,	1154195,	1154195,	1154195,	1154195,	1154195,	1154195,	39697,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	8908081,	866846,	866846,	866846,	866846,	320274,	1136371,	1136371,	1136371,	1136371,	1136371,	1059271,	1059271,	1059271,	1059271,	498888,	498888,	498888,	498888,	498888,	498888,	2812569,	2812569,	2812569,	2812569,	2812569,	2812569,	2812569,	2812569,	2812569,	2812569,	1498300,	1498300,	1498300,	1498300,	1498300,	1498300,	1498300,	1498300,	1498300,	1498300,	1498300,	1498300,	1498300,	1498300,	1423065,	1423065,	1423065,	1423065,	1423065,	618108,	618108,	618108,	618108,	618108,	174792,	174792,	531665,	61170,	247132,	177986,	228990,	260500,	116660,	87660,	51190,	26830,	149940,	148260,	122150,	106730,	102050,	92380,	492680,	157640,	367260,	599650,	233100,	79860,	86210,	94750,	136450,	337950,	21590,	14880,	174230,	114030,	23230,	112510,	315360,	91580,	89730,	177150,	911403,	911403,	911403,	911403,	911403,	911403,	808666,	808666,	808666,	808666,	808666,	808666,	844985,	844985,	844985,	844985,	844985,	844985,	1844245,	1844245,	1844245,	1844245,	1844245,	1844245,	1844245,	1844245,	1844245,	1844245,	1844245,	1844245,	1844245,	141538,	1846478,	1846478,	1846478,	1846478,	1846478,	1846478,	1846478,	1846478,	1846478,	1846478,	1846478,	1846478,	1846478,	687524,	687524,	687524,	687524,	687524,	1189934,	1189934,	1189934,	1189934,	1189934,	1189934,	1189934,	1189934,	1189934,	1189934,	1189934,	858852,	858852,	858852,	858852,	858852,	858852,	858852,	463405,	568210,	568210,	1194166,	1194166,	1194166,	1194166,	1194166,	1194166,	1194166,	1194166,	1194166,	1194166,	772268,	772268,	772268,	772268,	772268,	772268,	772268,	772268,	772268,	772268,	916202,	916202,	916202,	916202,	916202,	916202,	916202,	965424,	965424,	965424,	965424,	965424,	965424,	965424,	965424,	720060,	720060,	491100,	491100,	491100,	491100,	375200,	375200,	375200,	560500,	560500,	560500,	560500,	560500,	187400,	187400,	423200,	423200,	423200,	132000,	445000,	445000,	365500,	365500,	498073,	498073,	1131052,	1131052,	1131052,	1131052,	1131052,	1131052,	1131052,	1131052,	1131052,	571010,	571010,	571010,	571010,	571010,	2916458,	2916458,	2916458,	2916458,	2916458,	2916458,	2916458,	592057,	592057,	592057,	592057,	592057,	592057,	600259,	600259,	1158816,	1158816,	1158816,	1158816,	1158816,	1158816,	1158816,	1158816,	1158816,	1158816,	1402918,	1402918,	1402918,	1402918,	2320214,	2320214,	2320214,	2320214,	2320214,	],
    "COUNTY LAT":[	52.1963,	52.1963,	52.1963,	52.2002,	52.2002,	52.2002,	52.2002,	52.2002,	52.2002,	51.5742,	51.5742,	51.5742,	51.5742,	51.5742,	51.5742,	51.5742,	51.5742,	51.5742,	51.5742,	51.5742,	51.5742,	51.5742,	51.5742,	52.0765,	51.8098,	51.8098,	51.8098,	51.8098,	51.8098,	51.8098,	51.8098,	51.8098,	51.8098,	51.8098,	52.614,	52.614,	52.614,	52.614,	52.614,	52.614,	52.614,	52.1872,	52.1872,	52.1872,	52.1872,	52.1872,	52.1872,	52.1872,	52.1872,	52.1872,	53.1047,	53.1047,	53.1047,	53.1047,	53.1047,	53.1047,	53.1047,	53.1047,	53.1047,	52.7726,	52.7726,	52.7726,	52.7726,	52.7726,	52.7726,	52.7726,	52.7726,	52.9452,	52.9452,	52.9452,	52.9452,	52.9452,	52.9452,	52.9452,	52.9452,	52.9452,	52.273,	52.273,	52.273,	52.273,	52.273,	52.273,	52.273,	52.273,	52.273,	53.1003,	53.1003,	53.1003,	53.1003,	53.1003,	53.1003,	53.1003,	53.1003,	52.6583,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	51.5072,	54.6638,	54.6638,	54.6638,	54.6638,	55.2083,	54.9952,	54.9952,	54.9952,	54.9952,	54.9952,	53.1943,	53.1943,	53.1943,	53.1943,	54.6641,	54.6641,	54.6641,	54.6641,	54.6641,	54.6641,	53.4808,	53.4808,	53.4808,	53.4808,	53.4808,	53.4808,	53.4808,	53.4808,	53.4808,	53.4808,	53.7632,	53.7632,	53.7632,	53.7632,	53.7632,	53.7632,	53.7632,	53.7632,	53.7632,	53.7632,	53.7632,	53.7632,	53.7632,	53.7632,	53.3976,	53.3976,	53.3976,	53.3976,	53.3976,	54.7193,	54.7193,	54.7193,	54.7193,	54.7193,	54.3501,	54.3501,	54.3277,	54.3438,	54.9966,	54.5311,	57.1497,	57.2869,	56.698,	56.4006,	56.1075,	58.2091,	55.0701,	56.462,	55.5917,	55.9743,	55.9587,	55.7705,	55.9533,	56.0019,	56.2082,	55.8642,	57.4596,	55.9317,	55.8746,	57.6498,	55.6116,	55.8662,	58.9809,	56.3954,	55.8467,	55.5486,	60.5297,	55.4589,	55.6736,	56.1165,	55.9451,	55.907,	51.453,	51.453,	51.453,	51.453,	51.453,	51.453,	51.9004,	51.9004,	51.9004,	51.9004,	51.9004,	51.9004,	50.9086,	50.9086,	50.9086,	50.9086,	50.9086,	50.9086,	51.0577,	51.0577,	51.0577,	51.0577,	51.0577,	51.0577,	51.0577,	51.0577,	51.0577,	51.0577,	51.0577,	51.0577,	51.0577,	50.6938,	51.2787,	51.2787,	51.2787,	51.2787,	51.2787,	51.2787,	51.2787,	51.2787,	51.2787,	51.2787,	51.2787,	51.2787,	51.2787,	51.7612,	51.7612,	51.7612,	51.7612,	51.7612,	51.3148,	51.3148,	51.3148,	51.3148,	51.3148,	51.3148,	51.3148,	51.3148,	51.3148,	51.3148,	51.3148,	50.928,	50.928,	50.928,	50.928,	50.928,	50.928,	50.928,	51.4711,	50.4502,	50.4502,	50.7156,	50.7156,	50.7156,	50.7156,	50.7156,	50.7156,	50.7156,	50.7156,	50.7156,	50.7156,	50.7488,	50.7488,	50.7488,	50.7488,	50.7488,	50.7488,	50.7488,	50.7488,	50.7488,	50.7488,	51.8642,	51.8642,	51.8642,	51.8642,	51.8642,	51.8642,	51.8642,	51.1051,	51.1051,	51.1051,	51.1051,	51.1051,	51.1051,	51.1051,	51.1051,	51.3492,	51.3492,	53.0447,	53.0447,	53.0447,	53.0447,	51.8572,	51.8572,	51.8572,	51.5842,	51.5842,	51.5842,	51.5842,	51.5842,	52.9277,	52.9277,	51.5132,	51.5132,	51.5132,	52.5628,	51.6858,	51.6858,	51.6214,	51.6214,	52.7064,	52.7064,	52.8067,	52.8067,	52.8067,	52.8067,	52.8067,	52.8067,	52.8067,	52.8067,	52.8067,	52.2671,	52.2671,	52.2671,	52.2671,	52.2671,	52.4751,	52.4751,	52.4751,	52.4751,	52.4751,	52.4751,	52.4751,	52.2545,	52.2545,	52.2545,	52.2545,	52.2545,	52.2545,	53.8416,	53.8416,	53.9915,	53.9915,	53.9915,	53.9915,	53.9915,	53.9915,	53.9915,	53.9915,	53.9915,	53.9915,	53.4697,	53.4697,	53.4697,	53.4697,	53.8108,	53.8108,	53.8108,	53.8108,	53.8108,	],
    "COUNTY LONG":[	-0.45463,	-0.45463,	-0.45463,	0.126436,	0.126436,	0.126436,	0.126436,	0.126436,	0.126436,	0.4857,	0.4857,	0.4857,	0.4857,	0.4857,	0.4857,	0.4857,	0.4857,	0.4857,	0.4857,	0.4857,	0.4857,	0.4857,	0.4857,	-2.6544,	-0.2377,	-0.2377,	-0.2377,	-0.2377,	-0.2377,	-0.2377,	-0.2377,	-0.2377,	-0.2377,	-0.2377,	0.8864,	0.8864,	0.8864,	0.8864,	0.8864,	0.8864,	0.8864,	0.9708,	0.9708,	0.9708,	0.9708,	0.9708,	0.9708,	0.9708,	0.9708,	0.9708,	-1.5624,	-1.5624,	-1.5624,	-1.5624,	-1.5624,	-1.5624,	-1.5624,	-1.5624,	-1.5624,	-1.2052,	-1.2052,	-1.2052,	-1.2052,	-1.2052,	-1.2052,	-1.2052,	-1.2052,	-0.1601,	-0.1601,	-0.1601,	-0.1601,	-0.1601,	-0.1601,	-0.1601,	-0.1601,	-0.1601,	-0.8756,	-0.8756,	-0.8756,	-0.8756,	-0.8756,	-0.8756,	-0.8756,	-0.8756,	-0.8756,	-0.9936,	-0.9936,	-0.9936,	-0.9936,	-0.9936,	-0.9936,	-0.9936,	-0.9936,	-0.6396,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-0.1276,	-1.6788,	-1.6788,	-1.6788,	-1.6788,	-2.0784,	-1.5667,	-1.5667,	-1.5667,	-1.5667,	-1.5667,	-2.5197,	-2.5197,	-2.5197,	-2.5197,	-2.7527,	-2.7527,	-2.7527,	-2.7527,	-2.7527,	-2.7527,	-2.2426,	-2.2426,	-2.2426,	-2.2426,	-2.2426,	-2.2426,	-2.2426,	-2.2426,	-2.2426,	-2.2426,	-2.7044,	-2.7044,	-2.7044,	-2.7044,	-2.7044,	-2.7044,	-2.7044,	-2.7044,	-2.7044,	-2.7044,	-2.7044,	-2.7044,	-2.7044,	-2.7044,	-2.9437,	-2.9437,	-2.9437,	-2.9437,	-2.9437,	-6.2082,	-6.2082,	-6.2082,	-6.2082,	-6.2082,	-6.6523,	-6.6523,	-5.7158,	-7.6319,	-7.3086,	-6.813,	-2.0943,	-2.3816,	-2.9124,	-5.4807,	-3.7529,	-6.3789,	-3.6053,	-2.9707,	-4.5001,	-4.2023,	-2.7749,	-4.336,	-3.1883,	-3.7839,	-3.1495,	-4.2518,	-4.2264,	-4.68,	-3.1054,	-3.3168,	-4.6696,	-3.9613,	-2.9605,	-3.4284,	-4.5331,	-2.7861,	-1.2659,	-4.6292,	-3.782,	-3.9369,	-4.5646,	-3.5517,	-0.99071,	-0.99071,	-0.99071,	-0.99071,	-0.99071,	-0.99071,	-0.87746,	-0.87746,	-0.87746,	-0.87746,	-0.87746,	-0.87746,	0.2494,	0.2494,	0.2494,	0.2494,	0.2494,	0.2494,	-1.3081,	-1.3081,	-1.3081,	-1.3081,	-1.3081,	-1.3081,	-1.3081,	-1.3081,	-1.3081,	-1.3081,	-1.3081,	-1.3081,	-1.3081,	-1.3047,	0.5217,	0.5217,	0.5217,	0.5217,	0.5217,	0.5217,	0.5217,	0.5217,	0.5217,	0.5217,	0.5217,	0.5217,	0.5217,	-1.2465,	-1.2465,	-1.2465,	-1.2465,	-1.2465,	-0.56,	-0.56,	-0.56,	-0.56,	-0.56,	-0.56,	-0.56,	-0.56,	-0.56,	-0.56,	-0.56,	-0.4617,	-0.4617,	-0.4617,	-0.4617,	-0.4617,	-0.4617,	-0.4617,	-2.57742,	-4.64249,	-4.64249,	-3.5309,	-3.5309,	-3.5309,	-3.5309,	-3.5309,	-3.5309,	-3.5309,	-3.5309,	-3.5309,	-3.5309,	-2.3445,	-2.3445,	-2.3445,	-2.3445,	-2.3445,	-2.3445,	-2.3445,	-2.3445,	-2.3445,	-2.3445,	-2.238,	-2.238,	-2.238,	-2.238,	-2.238,	-2.238,	-2.238,	-2.9262,	-2.9262,	-2.9262,	-2.9262,	-2.9262,	-2.9262,	-2.9262,	-2.9262,	-1.9927,	-1.9927,	-2.9297,	-2.9297,	-2.9297,	-2.9297,	-4.3116,	-4.3116,	-4.3116,	-2.9977,	-2.9977,	-2.9977,	-2.9977,	-2.9977,	-4.1335,	-4.1335,	-3.3795,	-3.3795,	-3.3795,	-3.1493,	-3.3821,	-3.3821,	-3.9436,	-3.9436,	-2.7418,	-2.7418,	-2.1207,	-2.1207,	-2.1207,	-2.1207,	-2.1207,	-2.1207,	-2.1207,	-2.1207,	-2.1207,	-1.4675,	-1.4675,	-1.4675,	-1.4675,	-1.4675,	-1.8298,	-1.8298,	-1.8298,	-1.8298,	-1.8298,	-1.8298,	-1.8298,	-2.2668,	-2.2668,	-2.2668,	-2.2668,	-2.2668,	-2.2668,	-0.4344,	-0.4344,	-1.5412,	-1.5412,	-1.5412,	-1.5412,	-1.5412,	-1.5412,	-1.5412,	-1.5412,	-1.5412,	-1.5412,	-1.326,	-1.326,	-1.326,	-1.326,	-1.7626,	-1.7626,	-1.7626,	-1.7626,	-1.7626,	],
    "x":[	-50609.1800999999,	-50609.1800999999,	-50609.1800999999,	14074.79114,	14074.79114,	14074.79114,	14074.79114,	14074.79114,	14074.79114,	54067.87668,	54067.87668,	54067.87668,	54067.87668,	54067.87668,	54067.87668,	54067.87668,	54067.87668,	54067.87668,	54067.87668,	54067.87668,	54067.87668,	54067.87668,	54067.87668,	-295486.4564,	-26460.64296,	-26460.64296,	-26460.64296,	-26460.64296,	-26460.64296,	-26460.64296,	-26460.64296,	-26460.64296,	-26460.64296,	-26460.64296,	98673.59664,	98673.59664,	98673.59664,	98673.59664,	98673.59664,	98673.59664,	98673.59664,	108068.9617,	108068.9617,	108068.9617,	108068.9617,	108068.9617,	108068.9617,	108068.9617,	108068.9617,	108068.9617,	-173925.5724,	-173925.5724,	-173925.5724,	-173925.5724,	-173925.5724,	-173925.5724,	-173925.5724,	-173925.5724,	-173925.5724,	-134162.2503,	-134162.2503,	-134162.2503,	-134162.2503,	-134162.2503,	-134162.2503,	-134162.2503,	-134162.2503,	-17822.25048,	-17822.25048,	-17822.25048,	-17822.25048,	-17822.25048,	-17822.25048,	-17822.25048,	-17822.25048,	-17822.25048,	-97471.34614,	-97471.34614,	-97471.34614,	-97471.34614,	-97471.34614,	-97471.34614,	-97471.34614,	-97471.34614,	-97471.34614,	-110607.0461,	-110607.0461,	-110607.0461,	-110607.0461,	-110607.0461,	-110607.0461,	-110607.0461,	-110607.0461,	-71199.94631,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-14204.36703,	-186883.1611,	-186883.1611,	-186883.1611,	-186883.1611,	-231366.4297,	-174404.2462,	-174404.2462,	-174404.2462,	-174404.2462,	-174404.2462,	-280491.721,	-280491.721,	-280491.721,	-280491.721,	-306429.1623,	-306429.1623,	-306429.1623,	-306429.1623,	-306429.1623,	-306429.1623,	-249645.0901,	-249645.0901,	-249645.0901,	-249645.0901,	-249645.0901,	-249645.0901,	-249645.0901,	-249645.0901,	-249645.0901,	-249645.0901,	-301052.4309,	-301052.4309,	-301052.4309,	-301052.4309,	-301052.4309,	-301052.4309,	-301052.4309,	-301052.4309,	-301052.4309,	-301052.4309,	-301052.4309,	-301052.4309,	-301052.4309,	-301052.4309,	-327691.185,	-327691.185,	-327691.185,	-327691.185,	-327691.185,	-691093.6627,	-691093.6627,	-691093.6627,	-691093.6627,	-691093.6627,	-740530.6486,	-740530.6486,	-636279.9455,	-849579.2218,	-813589.6304,	-758419.6908,	-233136.4096,	-265118.4993,	-324206.885,	-610108.7332,	-417770.917,	-710095.8998,	-401340.1602,	-330696.8113,	-500948.8405,	-467797.8962,	-308900.455,	-482681.3121,	-354919.9325,	-421221.8212,	-350600.7363,	-473308.211,	-470480.6959,	-520975.2169,	-345691.5467,	-369224.4871,	-519817.4942,	-440969.8989,	-329561.3525,	-381647.7422,	-504622.3837,	-310147.2333,	-140919.3434,	-515320.1868,	-421010.3142,	-438253.7033,	-508128.9477,	-395373.4355,	-110285.3327,	-110285.3327,	-110285.3327,	-110285.3327,	-110285.3327,	-110285.3327,	-97678.40039,	-97678.40039,	-97678.40039,	-97678.40039,	-97678.40039,	-97678.40039,	27763.081,	27763.081,	27763.081,	27763.081,	27763.081,	27763.081,	-145617.0259,	-145617.0259,	-145617.0259,	-145617.0259,	-145617.0259,	-145617.0259,	-145617.0259,	-145617.0259,	-145617.0259,	-145617.0259,	-145617.0259,	-145617.0259,	-145617.0259,	-145238.5396,	58075.37835,	58075.37835,	58075.37835,	58075.37835,	58075.37835,	58075.37835,	58075.37835,	58075.37835,	58075.37835,	58075.37835,	58075.37835,	58075.37835,	58075.37835,	-138759.7453,	-138759.7453,	-138759.7453,	-138759.7453,	-138759.7453,	-62338.91484,	-62338.91484,	-62338.91484,	-62338.91484,	-62338.91484,	-62338.91484,	-62338.91484,	-62338.91484,	-62338.91484,	-62338.91484,	-62338.91484,	-51396.2089,	-51396.2089,	-51396.2089,	-51396.2089,	-51396.2089,	-51396.2089,	-51396.2089,	-286917.082,	-516799.6228,	-516799.6228,	-393057.99,	-393057.99,	-393057.99,	-393057.99,	-393057.99,	-393057.99,	-393057.99,	-393057.99,	-393057.99,	-393057.99,	-260988.5462,	-260988.5462,	-260988.5462,	-260988.5462,	-260988.5462,	-260988.5462,	-260988.5462,	-260988.5462,	-260988.5462,	-260988.5462,	-249133.0204,	-249133.0204,	-249133.0204,	-249133.0204,	-249133.0204,	-249133.0204,	-249133.0204,	-325743.094,	-325743.094,	-325743.094,	-325743.094,	-325743.094,	-325743.094,	-325743.094,	-325743.094,	-221826.3493,	-221826.3493,	-326132.7122,	-326132.7122,	-326132.7122,	-326132.7122,	-479965.1165,	-479965.1165,	-479965.1165,	-333702.4376,	-333702.4376,	-333702.4376,	-333702.4376,	-333702.4376,	-460139.1152,	-460139.1152,	-376204.2191,	-376204.2191,	-376204.2191,	-350578.4724,	-376493.6498,	-376493.6498,	-438999.5439,	-438999.5439,	-305215.7799,	-305215.7799,	-236075.2441,	-236075.2441,	-236075.2441,	-236075.2441,	-236075.2441,	-236075.2441,	-236075.2441,	-236075.2441,	-236075.2441,	-163361.3527,	-163361.3527,	-163361.3527,	-163361.3527,	-163361.3527,	-203692.4043,	-203692.4043,	-203692.4043,	-203692.4043,	-203692.4043,	-203692.4043,	-203692.4043,	-252339.0217,	-252339.0217,	-252339.0217,	-252339.0217,	-252339.0217,	-252339.0217,	-48357.1868,	-48357.1868,	-171565.5992,	-171565.5992,	-171565.5992,	-171565.5992,	-171565.5992,	-171565.5992,	-171565.5992,	-171565.5992,	-171565.5992,	-171565.5992,	-147609.6448,	-147609.6448,	-147609.6448,	-147609.6448,	-196211.7345,	-196211.7345,	-196211.7345,	-196211.7345,	-196211.7345,	],
    "y":[	6835697.133,	6835697.133,	6835697.133,	6836405.444,	6836405.444,	6836405.444,	6836405.444,	6836405.444,	6836405.444,	6723498.514,	6723498.514,	6723498.514,	6723498.514,	6723498.514,	6723498.514,	6723498.514,	6723498.514,	6723498.514,	6723498.514,	6723498.514,	6723498.514,	6723498.514,	6723498.514,	6813969.472,	6765807.647,	6765807.647,	6765807.647,	6765807.647,	6765807.647,	6765807.647,	6765807.647,	6765807.647,	6765807.647,	6765807.647,	6911915.109,	6911915.109,	6911915.109,	6911915.109,	6911915.109,	6911915.109,	6911915.109,	6834044.649,	6834044.649,	6834044.649,	6834044.649,	6834044.649,	6834044.649,	6834044.649,	6834044.649,	6834044.649,	7002388.117,	7002388.117,	7002388.117,	7002388.117,	7002388.117,	7002388.117,	7002388.117,	7002388.117,	7002388.117,	6941045.348,	6941045.348,	6941045.348,	6941045.348,	6941045.348,	6941045.348,	6941045.348,	6941045.348,	6972867.829,	6972867.829,	6972867.829,	6972867.829,	6972867.829,	6972867.829,	6972867.829,	6972867.829,	6972867.829,	6849638.678,	6849638.678,	6849638.678,	6849638.678,	6849638.678,	6849638.678,	6849638.678,	6849638.678,	6849638.678,	7001572.298,	7001572.298,	7001572.298,	7001572.298,	7001572.298,	7001572.298,	7001572.298,	7001572.298,	6920041.096,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	6711506.705,	7296888.058,	7296888.058,	7296888.058,	7296888.058,	7402398.299,	7360934.587,	7360934.587,	7360934.587,	7360934.587,	7360934.587,	7019019.344,	7019019.344,	7019019.344,	7019019.344,	7296945.8,	7296945.8,	7296945.8,	7296945.8,	7296945.8,	7296945.8,	7072432.861,	7072432.861,	7072432.861,	7072432.861,	7072432.861,	7072432.861,	7072432.861,	7072432.861,	7072432.861,	7072432.861,	7125436.157,	7125436.157,	7125436.157,	7125436.157,	7125436.157,	7125436.157,	7125436.157,	7125436.157,	7125436.157,	7125436.157,	7125436.157,	7125436.157,	7125436.157,	7125436.157,	7056884.486,	7056884.486,	7056884.486,	7056884.486,	7056884.486,	7307577.45,	7307577.45,	7307577.45,	7307577.45,	7307577.45,	7236741.853,	7236741.853,	7232464.665,	7235538.658,	7361206.27,	7271388.891,	7790777.805,	7818986.034,	7698641.364,	7638580.647,	7579845.697,	8011371.787,	7375482.997,	7650941.957,	7477560.362,	7553301.213,	7550198.383,	7512863.696,	7549124.618,	7558793.902,	7599974.525,	7531429.078,	7854642.935,	7544831.055,	7533492.457,	7894108.461,	7481481.566,	7531825.839,	8176259.788,	7637534.677,	7527958.294,	7469074.515,	8518625.886,	7451443.504,	7493711.156,	7581642.553,	7547494.373,	7539924.219,	6701818.766,	6701818.766,	6701818.766,	6701818.766,	6701818.766,	6701818.766,	6782136.493,	6782136.493,	6782136.493,	6782136.493,	6782136.493,	6782136.493,	6605142.018,	6605142.018,	6605142.018,	6605142.018,	6605142.018,	6605142.018,	6631506.538,	6631506.538,	6631506.538,	6631506.538,	6631506.538,	6631506.538,	6631506.538,	6631506.538,	6631506.538,	6631506.538,	6631506.538,	6631506.538,	6631506.538,	6567308.176,	6670741.382,	6670741.382,	6670741.382,	6670741.382,	6670741.382,	6670741.382,	6670741.382,	6670741.382,	6670741.382,	6670741.382,	6670741.382,	6670741.382,	6670741.382,	6757061.989,	6757061.989,	6757061.989,	6757061.989,	6757061.989,	6677168.246,	6677168.246,	6677168.246,	6677168.246,	6677168.246,	6677168.246,	6677168.246,	6677168.246,	6677168.246,	6677168.246,	6677168.246,	6608567.625,	6608567.625,	6608567.625,	6608567.625,	6608567.625,	6608567.625,	6608567.625,	6705052.757,	6524610.704,	6524610.704,	6571140.006,	6571140.006,	6571140.006,	6571140.006,	6571140.006,	6571140.006,	6571140.006,	6571140.006,	6571140.006,	6571140.006,	6576979.064,	6576979.064,	6576979.064,	6576979.064,	6576979.064,	6576979.064,	6576979.064,	6576979.064,	6576979.064,	6576979.064,	6775608.22,	6775608.22,	6775608.22,	6775608.22,	6775608.22,	6775608.22,	6775608.22,	6639905.795,	6639905.795,	6639905.795,	6639905.795,	6639905.795,	6639905.795,	6639905.795,	6639905.795,	6683297.167,	6683297.167,	6991270.494,	6991270.494,	6991270.494,	6991270.494,	6774346.452,	6774346.452,	6774346.452,	6725289.851,	6725289.851,	6725289.851,	6725289.851,	6725289.851,	6969635.559,	6969635.559,	6712579.879,	6712579.879,	6712579.879,	6902533.686,	6743512.233,	6743512.233,	6731957.09,	6731957.09,	6928873.45,	6928873.45,	6947322.386,	6947322.386,	6947322.386,	6947322.386,	6947322.386,	6947322.386,	6947322.386,	6947322.386,	6947322.386,	6848565.396,	6848565.396,	6848565.396,	6848565.396,	6848565.396,	6886489.742,	6886489.742,	6886489.742,	6886489.742,	6886489.742,	6886489.742,	6886489.742,	6846273.779,	6846273.779,	6846273.779,	6846273.779,	6846273.779,	6846273.779,	7140214.123,	7140214.123,	7168546.66,	7168546.66,	7168546.66,	7168546.66,	7168546.66,	7168546.66,	7168546.66,	7168546.66,	7168546.66,	7168546.66,	7070356.737,	7070356.737,	7070356.737,	7070356.737,	7134405.198,	7134405.198,	7134405.198,	7134405.198,	7134405.198,	],
    "REGION":[	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Anglia",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"East Midlands",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"London",	"North East",	"North East",	"North East",	"North East",	"North East",	"North East",	"North East",	"North East",	"North East",	"North East",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"North West",	"Northern Ireland",	"Northern Ireland",	"Northern Ireland",	"Northern Ireland",	"Northern Ireland",	"Northern Ireland",	"Northern Ireland",	"Northern Ireland",	"Northern Ireland",	"Northern Ireland",	"Northern Ireland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South East",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"South West",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"West Midlands",	"Yorkshire & Humber",	"Yorkshire & Humber",	"Yorkshire & Humber",	"Yorkshire & Humber",	"Yorkshire & Humber",	"Yorkshire & Humber",	"Yorkshire & Humber",	"Yorkshire & Humber",	"Yorkshire & Humber",	"Yorkshire & Humber",	"Yorkshire & Humber",	"Yorkshire & Humber",	"Yorkshire & Humber",	"Yorkshire & Humber",	"Yorkshire & Humber",	"Yorkshire & Humber",	"Yorkshire & Humber",	"Yorkshire & Humber",	"Yorkshire & Humber",	"Yorkshire & Humber",	"Yorkshire & Humber",	],
    "REGION POP":[	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	5847000,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	4804149,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	8961989,	2657909,	2657909,	2657909,	2657909,	2657909,	2657909,	2657909,	2657909,	2657909,	2657909,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	7052000,	1900000,	1900000,	1900000,	1900000,	1900000,	1900000,	1900000,	1900000,	1900000,	1900000,	1900000,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	5463300,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	8635000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	5289000,	3153000,	3153000,	3153000,	3153000,	3153000,	3153000,	3153000,	3153000,	3153000,	3153000,	3153000,	3153000,	3153000,	3153000,	3153000,	3153000,	3153000,	3153000,	3153000,	3153000,	3153000,	3153000,	5713000,	5713000,	5713000,	5713000,	5713000,	5713000,	5713000,	5713000,	5713000,	5713000,	5713000,	5713000,	5713000,	5713000,	5713000,	5713000,	5713000,	5713000,	5713000,	5713000,	5713000,	5713000,	5713000,	5713000,	5713000,	5713000,	5713000,	5713000,	5713000,	5284000,	5284000,	5284000,	5284000,	5284000,	5284000,	5284000,	5284000,	5284000,	5284000,	5284000,	5284000,	5284000,	5284000,	5284000,	5284000,	5284000,	5284000,	5284000,	5284000,	5284000,	],
    "COUNTRY":[	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"Northern Ireland",	"Northern Ireland",	"Northern Ireland",	"Northern Ireland",	"Northern Ireland",	"Northern Ireland",	"Northern Ireland",	"Northern Ireland",	"Northern Ireland",	"Northern Ireland",	"Northern Ireland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"Scotland",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"Wales",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	"England",	]
    }

static = pd.DataFrame(static_dict)


country_static_dict = {"location" : [	"Afghanistan", 	"Albania", 	"Algeria", 	"American Samoa", 	"Andorra", 	"Angola", 	"Anguilla", 	"Antarctica", 	"Antigua and Barbuda", 	"Argentina", 	"Armenia", 	"Aruba", 	"Australia", 	"Austria", 	"Azerbaijan", 	"Bahamas", 	"Bahrain", 	"Bangladesh", 	"Barbados", 	"Belarus", 	"Belgium", 	"Belize", 	"Benin", 	"Bermuda", 	"Bhutan", 	"Bolivia", 	"Bonaire Sint Eustatius and Saba", 	"Bosnia and Herzegovina", 	"Botswana", 	"Bouvet Island", 	"Brazil", 	"British Indian Ocean Territory", 	"British Virgin Islands", 	"Brunei", 	"Bulgaria", 	"Burkina Faso", 	"Burundi", 	"Cambodia", 	"Cameroon", 	"Canada", 	"Cape Verde", 	"Cayman Islands", 	"Central African Republic", 	"Chad", 	"Chile", 	"China", 	"Christmas Island", 	"Cocos [Keeling] Islands", 	"Colombia", 	"Comoros", 	"Democratic Republic of Congo", 	"Congo", 	"Cook Islands", 	"Costa Rica", 	"Cote d'Ivoire", 	"Croatia", 	"Cuba", 	"Curacao", 	"Cyprus", 	"Czechia", 	"Denmark", 	"Djibouti", 	"Dominica", 	"Dominican Republic", 	"Ecuador", 	"Egypt", 	"El Salvador", 	"Equatorial Guinea", 	"Eritrea", 	"Estonia", 	"Ethiopia", 	"Falkland Islands", 	"Faeroe Islands", 	"Fiji", 	"Finland", 	"France", 	"French Guiana", 	"French Polynesia", 	"French Southern Territories", 	"Gabon", 	"Gambia", 	"Palestine", 	"Georgia", 	"Germany", 	"Ghana", 	"Gibraltar", 	"Greece", 	"Greenland", 	"Grenada", 	"Guadeloupe", 	"Guam", 	"Guatemala", 	"Guernsey", 	"Guinea", 	"Guinea-Bissau", 	"Guyana", 	"Haiti", 	"Heard Island and McDonald Islands", 	"Honduras", 	"Hong Kong", 	"Hungary", 	"Iceland", 	"India", 	"Indonesia", 	"Iran", 	"Iraq", 	"Ireland", 	"Isle of Man", 	"Israel", 	"Italy", 	"Jamaica", 	"Japan", 	"Jersey", 	"Jordan", 	"Kazakhstan", 	"Kenya", 	"Kiribati", 	"Kosovo", 	"Kuwait", 	"Kyrgyzstan", 	"Laos", 	"Latvia", 	"Lebanon", 	"Lesotho", 	"Liberia", 	"Libya", 	"Liechtenstein", 	"Lithuania", 	"Luxembourg", 	"Macao", 	"North Macedonia", 	"Madagascar", 	"Malawi", 	"Malaysia", 	"Maldives", 	"Mali", 	"Malta", 	"Marshall Islands", 	"Martinique", 	"Mauritania", 	"Mauritius", 	"Mayotte", 	"Mexico", 	"Micronesia (country)", 	"Moldova", 	"Monaco", 	"Mongolia", 	"Montenegro", 	"Montserrat", 	"Morocco", 	"Mozambique", 	"Myanmar", 	"Namibia", 	"Nauru", 	"Nepal", 	"Netherlands", 	"Netherlands Antilles", 	"New Caledonia", 	"New Zealand", 	"Nicaragua", 	"Niger", 	"Nigeria", 	"Niue", 	"Norfolk Island", 	"North Korea", 	"Northern Mariana Islands", 	"Norway", 	"Oman", 	"Pakistan", 	"Palau", 	"Palestinian Territories", 	"Panama", 	"Papua New Guinea", 	"Paraguay", 	"Peru", 	"Philippines", 	"Pitcairn Islands", 	"Poland", 	"Portugal", 	"Puerto Rico", 	"Qatar", 	"Rï¿½union", 	"Romania", 	"Russia", 	"Rwanda", 	"Saint Helena", 	"Saint Kitts and Nevis", 	"Saint Lucia", 	"Saint Pierre and Miquelon", 	"Saint Vincent and the Grenadines", 	"Samoa", 	"San Marino", 	"Sao Tome and Principe", 	"Saudi Arabia", 	"Senegal", 	"Serbia", 	"Seychelles", 	"Sierra Leone", 	"Singapore", 	"Sint Maarten (Dutch part)", 	"Slovakia", 	"Slovenia", 	"Solomon Islands", 	"Somalia", 	"South Africa", 	"South Georgia and the South Sandwich Islands", 	"South Korea", 	"South Sudan", 	"Spain", 	"Sri Lanka", 	"Sudan", 	"Suriname", 	"Svalbard and Jan Mayen", 	"Eswatini", 	"Sweden", 	"Switzerland", 	"Syria", 	"Taiwan", 	"Tajikistan", 	"Tanzania", 	"Thailand", 	"Timor", 	"Togo", 	"Tokelau", 	"Tonga", 	"Trinidad and Tobago", 	"Tunisia", 	"Turkey", 	"Turkmenistan", 	"Turks and Caicos Islands", 	"Tuvalu", 	"U.S. Virgin Islands", 	"Uganda", 	"Ukraine", 	"United Arab Emirates", 	"United Kingdom", 	"United States", 	"Uruguay", 	"Uzbekistan", 	"Vanuatu", 	"Vatican", 	"Venezuela", 	"Vietnam", 	"Wallis and Futuna", 	"Western Sahara", 	"Yemen", 	"Zambia", 	"Zimbabwe"	],
                    "x" : [	7537437.48959648, 	2245128.33707019, 	184748.721227277, 	-18939031.7639707, 	178284.17575793, 	1989711.99933651, 	-7020766.10683701, 	-7946.987128241, 	-6879146.89780319, 	-7081775.5330027, 	5013628.26573121, 	-7788839.75781165, 	14891780.0203209, 	1619706.60604546, 	5296239.28714874, 	-8615714.47889362, 	5636970.99394588, 	10058420.7568684, 	-6628318.48156306, 	3111757.02942629, 	497590.999398522, 	-9851513.33440134, 	257797.461641749, 	-7208757.45351161, 	10067022.413922, 	-7078656.47219016, 	-7596275.0724968, 	1968025.73801558, 	2747906.71342019, 	379955.018058656, 	-5780295.72889815, 	8001257.49507305, 	-7195688.32265349, 	12771425.6929792, 	2837069.61804393, 	-173835.73758634, 	3330555.154622, 	11687540.5390554, 	1375321.36193245, 	-11838468.3952288, 	-2673136.86235856, 	-8968672.51668407, 	2330968.24357426, 	2085259.74467419, 	-7964126.87891895, 	11598978.5370429, 	11765406.9643924, 	10783625.4945776, 	-8270741.27685828, 	4883833.07905098, 	2422163.39682193, 	1761926.94032957, 	-17786368.9758551, 	-9323388.9571511, 	-617498.120989552, 	1692056.26005775, 	-8658559.90374657, 	-7679934.00753725, 	3721394.88117093, 	1722442.25090367, 	1057733.86782716, 	4741127.72574549, 	-6831785.79780621, 	-7810470.58202616, 	-8703336.94440377, 	3428918.39252082, 	-9895916.45288897, 	1143016.84291879, 	4428549.16344793, 	2784501.99414306, 	4507289.78074615, 	-6626138.28933587, 	-769418.724381893, 	19972321.096134, 	2866271.05818831, 	246433.411424118, 	-5913935.00023445, 	-16631893.6837905, 	7719846.0524883, 	1292357.39447302, 	-1704316.87745423, 	3819240.92871553, 	4826467.13981895, 	1163458.55233265, 	-113901.435062732, 	-595044.311779604, 	2429471.29875353, 	-4742689.31556233, 	-6857744.94646175, 	-6909338.19085971, 	16118364.4049782, 	-10044442.1457705, 	-287791.830519052, 	-1079425.58380314, 	-1689875.84519159, 	-6560077.62995595, 	-8046753.3256823, 	8182445.43974832, 	-9600404.94964187, 	12702611.1007165, 	2171097.87006641, 	-2117389.66666287, 	8790107.59317036, 	12681664.112134, 	5976525.94240584, 	4862356.43233121, 	-917705.63695576, 	-506287.278019292, 	3879663.70116474, 	1398994.34220557, 	-8604719.23014899, 	15390245.1003611, 	-237249.664753164, 	4034041.79363583, 	7449910.42488995, 	4219698.10267155, 	-18783387.3009723, 	2326908.7557035, 	5285646.01308537, 	8322923.95795999, 	11409746.423324, 	2738814.47137067, 	3992171.30488325, 	3142950.86581689, 	-1049687.02711568, 	1917849.03413796, 	1063699.25669979, 	2658451.37249413, 	682342.058335106, 	12639646.1250561, 	2420672.9401597, 	5217445.12517545, 	3818428.29643274, 	11351890.344374, 	8150888.81313723, 	-444851.164245392, 	1600263.98906147, 	19056168.9226723, 	-6793179.97576012, 	-1217928.18105322, 	6406676.25469708, 	5027883.28312474, 	-11416123.6943125, 	16759239.7303538, 	3158121.15206373, 	825193.6854515, 	11560156.8665042, 	2156747.22923029, 	-6922665.91689493, 	-789546.846790188, 	3955132.74994804, 	10681797.8828058, 	2058343.02575885, 	18582729.9113158, 	9364641.73404927, 	589021.036771761, 	-7687733.71897917, 	18436516.1016189, 	19468217.2386072, 	-9485225.34418585, 	899646.943881312, 	965727.418130598, 	-18909533.8800223, 	18696633.0161709, 	14194358.6237629, 	16184149.6599379, 	942758.756275731, 	6225348.27010239, 	7719463.00212048, 	14981657.5960755, 	3922136.76232099, 	-8992625.24283755, 	16025058.5228656, 	-6505937.61824762, 	-8350648.52242001, 	13555821.5642914, 	-14186478.8736071, 	2131226.79068797, 	-915542.031332702, 	-7412781.47852821, 	5697763.90370198, 	6182281.9873797, 	2779287.00995787, 	11724030.288901, 	3325546.00017528, 	-1116611.97102212, 	-6988971.36783511, 	-6788139.31789751, 	-6264071.31157228, 	-6822463.01309125, 	-19158599.6634452, 	1386793.39205615, 	736164.809494672, 	5018189.35922748, 	-1608829.57860005, 	2338361.5275553, 	6177338.62275204, 	-1311331.24508128, 	11557171.2777611, 	-7021530.4264608, 	2192885.32080447, 	1669287.30536937, 	17828505.9634687, 	5142917.72796477, 	2553391.48798765, 	-4072947.39907063, 	14222948.6972639, 	3485076.84923621, 	-417361.261271957, 	8991475.31249766, 	3363811.85249649, 	-6236984.27383603, 	2634962.62597828, 	3502764.18048938, 	2075385.03792388, 	915882.446335548, 	4341105.58835949, 	13465262.9358921, 	7934418.37849401, 	3883805.89941716, 	11242438.2380388, 	13995925.6201714, 	91814.3122554577, 	-19130909.1627494, 	-19502979.0873167, 	-6815257.85904966, 	1061709.53212135, 	3923268.65890337, 	6629774.54050264, 	-7992508.78497211, 	19775832.9553662, 	-7224226.96654969, 	3594536.97057477, 	3469336.49587703, 	5994311.68008887, 	-382490.764739436, 	-10654710.288472, 	-6207824.35586171, 	7189598.47859016, 	18585808.4518337, 	1386304.92213055, 	-7412734.83566157, 	12053362.6572019, 	-19720926.5089637, 	-1434444.47932665, 	5400819.60728888, 	3100173.45717281, 	3245503.835	],
                    "y" : [	4020628.91425176, 	5034984.47354938, 	3253246.7111104, 	-1605322.91626951, 	5243158.77423932, 	-1255100.64229663, 	2063380.22373135, 	-13041080.3788631, 	1927905.53025504, 	-4638374.27508448, 	4875988.64441488, 	1405072.29853456, 	-2909486.05499706, 	6026746.97464444, 	4886759.75180789, 	2879955.73766907, 	2990464.96892231, 	2715069.96728121, 	1481892.10574402, 	7115387.65840171, 	6534001.85628874, 	1942939.08367745, 	1040714.83444027, 	3805571.59924708, 	3187857.67284969, 	-1838348.78952181, 	1366018.23070611, 	5452434.56167511, 	-2551008.42079258, 	-7250716.04599391, 	-1601191.81343798, 	-707568.004807329, 	2086849.42971617, 	505392.766624335, 	5271553.44741867, 	1372844.31377437, 	-375703.957360079, 	1410155.01228159, 	822665.28673137, 	7584411.73274686, 	1804963.87477991, 	2215482.84554602, 	737584.011323472, 	1741597.35721266, 	-4256013.67515924, 	4281602.65962693, 	-1169512.13951931, 	-1364397.15879431, 	509367.281339195, 	-1331486.00400163, 	-449917.840172403, 	-25383.2486142073, 	-2420129.31647128, 	1090519.23159129, 	841780.906411916, 	5637278.20189052, 	2454202.39094899, 	1365012.66621055, 	4181073.46326499, 	6414728.45894998, 	7611135.06822883, 	1325814.40876495, 	1737074.177907, 	2123842.62616099, 	-203887.308283873, 	3101070.05079383, 	1550614.44850895, 	183791.756876065, 	1709882.21308792, 	8093419.12325582, 	1022366.88618045, 	-6763368.89254166, 	8833729.51924795, 	-1871778.96007825, 	8841170.39421423, 	5816903.71342701, 	438262.991762637, 	-2000096.71368684, 	-6322568.22870692, 	-89469.1842363075, 	1510410.5429241, 	3678896.74447446, 	5208343.60294129, 	6650655.0411742, 	887453.057711699, 	4319590.91074291, 	4732306.81297844, 	11648433.8893853, 	1375628.69920347, 	1920356.04615268, 	1510538.96225389, 	1779661.01176423, 	6354252.02219866, 	1112739.8189076, 	1323381.86467776, 	541709.129825426, 	2151543.94474958, 	-6998144.91629927, 	1712260.14050652, 	2559188.18019954, 	5968637.67912934, 	9598645.70535156, 	2343495.1657045, 	-87864.4700433506, 	3819612.20144186, 	3924966.44538564, 	7059743.32700176, 	7214999.55342837, 	3638731.18758304, 	5141815.93764112, 	2050378.80262833, 	4328841.56251279, 	6311325.84521973, 	3578991.17220775, 	6110111.70260061, 	-2622.57595750057, 	-375409.675811241, 	5251683.25400095, 	3415373.48795977, 	5042534.56712338, 	2256011.88591926, 	7735556.79988787, 	4009311.24765568, 	-3453515.30546257, 	717073.663481412, 	3040644.05901102, 	5969211.71456785, 	7394820.26024112, 	6414345.6273997, 	2535403.72906875, 	5102533.95645589, 	-2127516.82188029, 	-1488801.35515204, 	469131.367657738, 	356717.437019099, 	1987359.39960322, 	4292024.32282969, 	795929.834460608, 	1647921.84713704, 	2392819.4110111, 	-2314350.15971731, 	-1440031.36837369, 	2708933.29223288, 	828932.64331924, 	6009523.46788737, 	5426881.18870471, 	5919658.72976108, 	5267734.26896199, 	1890870.76860532, 	3735999.22765996, 	-2115616.18009845, 	2501198.83421016, 	-2626896.71532767, 	-58196.1882451217, 	3298848.0518502, 	6824142.82162378, 	1371448.51586734, 	-2380471.63263091, 	-4997684.89055108, 	1444360.51955677, 	1991691.5583851, 	1015263.98318438, 	-2161346.98144971, 	-3380844.44276095, 	4915452.24836705, 	1959369.84170499, 	8505587.03868893, 	2453104.64123164, 	3551885.66491287, 	838972.716642178, 	3757032.78304478, 	953980.901354921, 	-704409.432654807, 	-2685620.33203023, 	-1027437.35576795, 	1445993.99749712, 	-2839384.07927773, 	6785571.89879241, 	4779112.74164717, 	2063412.92135482, 	2919390.33288809, 	-2405613.22938403, 	5771245.40443157, 	8747149.04879007, 	-216032.053352474, 	-2770900.81218258, 	1962517.70955473, 	1563829.33728683, 	5932601.69425505, 	1457939.21167806, 	-1546584.97898472, 	5456526.58907658, 	20745.5368834105, 	2739515.79193205, 	1631344.63070637, 	5467999.2021777, 	-521507.915973792, 	945266.170436555, 	150527.16264056, 	2041611.68929128, 	6218887.49388304, 	5804618.90973943, 	-1078863.73820739, 	574309.098918889, 	-3575670.67552715, 	-7251936.8801814, 	4287936.28939909, 	767388.000253091, 	4933551.65246177, 	879195.51763868, 	1444062.60971878, 	436635.688369716, 	14133950.0244899, 	-3063940.4261599, 	8428326.96544027, 	5912448.0548712, 	4137016.35131912, 	2716627.93923655, 	4701785.38842984, 	-710461.619567908, 	1789676.62349398, 	-991846.878008399, 	963163.074993677, 	-1002342.80678273, 	-2413233.59726868, 	1197174.42092568, 	4013627.8303939, 	4716479.68462888, 	4717335.00685111, 	2474828.68312403, 	-793468.614323318, 	2076886.93604994, 	152893.371044184, 	6170212.7114405, 	2683384.65766366, 	7435586.53098273, 	4451692.55481052, 	-3832130.8249938, 	5068181.96381872, 	-1732652.75617634, 	5146447.8072035, 	716591.403236939, 	1580908.75857189, 	-1547699.3378589, 	2779693.09170113, 	1752983.40765201, 	-1475033.83165838, 	-2156753.574	]
                    }
world_static = pd.DataFrame(country_static_dict)


def pull_national_data() :

    # API URL """
    url = r'https://api.coronavirus.data.gov.uk/v2/data?areaType=overview&metric=newCasesByPublishDate&metric=newTestsByPublishDate&metric=newAdmissions&metric=hospitalCases&metric=covidOccupiedMVBeds&format=json'

    # Pull data into dataframe """
    response = requests.get(url)
    json = response.json()
    df = pd.DataFrame(json['body'])

    # Prepare dataframe
    drop_cols = ['areaType', 'areaCode', 'areaName']
    df.drop(drop_cols, axis=1, inplace=True)
    df2 = df[['date', 'newCasesByPublishDate', 'newTestsByPublishDate', 'newAdmissions', 'hospitalCases',
              'covidOccupiedMVBeds']].copy()
    df2.columns = ['Date', '# Cases', '# Tests', '# Hospital Admissions', '# Hospital Cases', '# Occupied MV Beds']
    df2['% Positive'] = round(df2['# Cases'] / df2['# Tests'], 4) * 100
    data = df2[['Date', '# Cases', '# Tests', '% Positive', '# Hospital Admissions', '# Hospital Cases',
              '# Occupied MV Beds']].copy()
    data['Date'] = pd.to_datetime(data['Date'])

    return data



def construct_chart(data, column, title, y_label, x_range=0) :

    # Prepare data
    total = data[['Date', column]].copy().dropna()
    x = total['Date']
    y = total[column]
    date = str(total['Date'].max())[0:10]

    if x_range == 0 :

        p = figure(
            title=title + " (" + date + ")",
            plot_width=400,
            plot_height=450,
            x_axis_label="Date",
            y_axis_label=y_label,
            x_axis_type='datetime',
            tools='pan, box_zoom, wheel_zoom, reset'
        )

    else :

        p = figure(
            title=title + " (" + date + ")",
            plot_width=400,
            plot_height=450,
            x_range=x_range,
            x_axis_label="Date",
            y_axis_label=y_label,
            x_axis_type='datetime',
            tools='pan, box_zoom, wheel_zoom, reset'
        )

    # add a line renderer with legend and line thickness
    p.line(x, y, line_width=2)

    # format y axis
    p.yaxis.formatter=NumeralTickFormatter(format="00")

    return p



def grid_plot() :

    data = pull_national_data()

    s1 = construct_chart(data, "# Cases", "Total Cases", '# Cases')
    s2 = construct_chart(data, "# Tests", "Total Tests", '# Tests', s1.x_range)
    s3 = construct_chart(data, "% Positive", "% Positive", '% Positive', s1.x_range)
    s4 = construct_chart(data, "# Hospital Admissions", "Hospital Admissions", '# Hospital Admissions', s1.x_range)
    s5 = construct_chart(data, "# Hospital Cases", "Hospital Beds", '# Hospital Cases', s1.x_range)
    s6 = construct_chart(data, "# Occupied MV Beds", "MV Beds", '# Occupied MV Beds', s1.x_range)

    p = gridplot([[s1, s2, s3], [s4, s5, s6]])

    script, div = components(p)

    return script, div



def process_map_data() :

    # API URL """
    url = r'https://api.coronavirus.data.gov.uk/v2/data?areaType=ltla&metric=newCasesByPublishDate&format=json'

    # Pull COVID data into dataframe """
    response = requests.get(url)
    json = response.json()
    covid_raw = pd.DataFrame(json['body'])

    # Change date column to datetime
    covid_raw_date = covid_raw.copy()
    covid_raw_date['date'] = pd.to_datetime(covid_raw_date['date'])

    covid_df = covid_raw_date.sort_values('date', ascending=False).copy()

    # Drop Perth and Kinross
    covid_df = covid_df[covid_df['areaName'] != 'Perth and Kinross']

    # Merge dataframes
    covid_static_df = covid_df.merge(static, left_on='areaCode', right_on='LTLA CODE', how='left')

    # Create county df for the map
    county_covid_df = covid_static_df.groupby(['date', 'COUNTY', 'COUNTY POP', 'x', 'y'])['newCasesByPublishDate'].sum().reset_index()

    county_covid_df['CASES_POP'] = county_covid_df['newCasesByPublishDate'] / county_covid_df['COUNTY POP'] * 100
    county_covid_df['CASES_POP_100'] = county_covid_df['CASES_POP'] * 100
    county_covid_df['ts'] = county_covid_df['date'].values.astype(np.int64) / 1000000
    county_covid_df.drop('COUNTY POP', axis=1, inplace=True)

    # Create pivots
    county_covid_pop100_pivot = county_covid_df.pivot_table(values='CASES_POP_100', index=['COUNTY', 'x', 'y'],
                                                        columns='ts')
    county_covid_pop_pivot = county_covid_df.pivot_table(values='CASES_POP', index='COUNTY', columns='ts')

    # Final merge
    county_covid_pop100_pivot = county_covid_pop100_pivot.reset_index()
    county_covid_df_final = county_covid_pop_pivot.merge(county_covid_pop100_pivot, on='COUNTY', how='left',
                                                        suffixes=('_pop', '_pop100'))

    max_date = county_covid_df['date'].max()
    min_date = county_covid_df['date'].min()
    max_ts = int(county_covid_df['ts'].max())
    min_ts = int(county_covid_df['ts'].min())

    # Create current data
    county_covid_df_visible = county_covid_df_final[['COUNTY', 'x', 'y', str(max_ts)+'.0_pop',
                                                     str(max_ts)+'.0_pop100']]
    county_covid_df_visible.columns = ['COUNTY', 'x', 'y', 'pop', 'pop100']

    # Create region df
    covid_df_for_county = covid_df[covid_df['date'] == max_date].copy()
    static_covid_df = static.merge(covid_df_for_county, right_on='areaCode', left_on='LTLA CODE', how='left')
    region_covid_cases = static_covid_df.groupby('REGION')['newCasesByPublishDate'].sum()
    region_covid_df = static_covid_df[['REGION', 'REGION POP']].copy().drop_duplicates()
    region_covid_df = region_covid_df.merge(region_covid_cases, on='REGION', how='left')
    region_covid_df.columns = ['REGION', 'POP', 'CASES']
    region_covid_df['CASES'] = region_covid_df['CASES'].astype(int)
    region_covid_df['CASES % POP'] = round(region_covid_df['CASES'] / region_covid_df['POP'] * 100, 2)
    region_covid_df = region_covid_df.drop('POP', axis=1)
    region_covid_df = region_covid_df.sort_values('CASES % POP', ascending=False).reset_index(drop=True)

    # Create Sources
    source_available = ColumnDataSource(county_covid_df_final)
    source_visible = ColumnDataSource(county_covid_df_visible)

    # Produce map
    UK = x_range, y_range = ((-11.854844, -1003304), (6398291, 8115972))

    p = figure(
        title='UK Map',
        plot_height=650,
        tools='pan, wheel_zoom, box_zoom, save, reset',
        x_range=x_range,
        y_range=y_range,
        x_axis_type='mercator',
        y_axis_type='mercator'
    )

    url = 'http://a.basemaps.cartocdn.com/rastertiles/voyager/{Z}/{X}/{Y}.png'
    attribution = 'Tiles by Carto, under CC by 3.0.  Data by OSM, under 0DbL.'

    p.add_tile(WMTSTileSource(url=url, attribution=attribution))

    p.circle(x='x',
             y='y',
             fill_color='firebrick',
             line_color='firebrick',
             size='pop100',
             alpha=0.5,
             source=source_visible
            )

    p.add_tools(HoverTool(
        tooltips=[
            ( 'County',   '@COUNTY'            ),
            ( 'Cases (%)',  '@pop' ),
        ],

        formatters={
            'County'      : 'printf',
            'Cases (%)' : 'numeral',
        },

    ))

    # Create slider

    slider = DateSlider(title = "Date", value = max_ts, start = min_ts, end = max_ts, step = 86400000)

    callback = CustomJS(args=dict(source_visible=source_visible,
                                  source_available=source_available,
                                  slider = slider),
                        code="""
                            var sli = slider.value.toString();
                            var data_visible = source_visible.data;
                            var data_available = source_available.data;
                            data_visible['pop100'] = data_available[sli + '.0_pop100'];
                            data_visible['pop'] = data_available[sli + '.0_pop'];

                            source_visible.change.emit();
                        """)

    slider.js_on_change('value', callback)

    plot = column(p, slider)

    script, div = components(plot)

    return script, div, region_covid_df


def create_world_df(df, col, metric_adj) :

    # Reduce df and rename metric column
    data = df[['location', 'ts', col]].copy()
    data.columns = ['location', 'ts', 'metric']

    # Remove Unwanted Countries
    remove_countries = ['Africa' ,'Asia', 'Europe', 'European Union', 'High income', 'International', 'Low income',
                        'Lower middle income', 'North America', 'Oceania', 'South America', 'Upper middle income',
                        'World', 'Isle of Man', 'Faeroe Islands']

    data = data[~data['location'].isin(remove_countries)]

    # Merge with static data
    data = data.merge(world_static, on='location', how='left')

    # Adjust metric for visualisation
    data['adj'] = data['metric'] * metric_adj

    # Make pivots and merge into final df
    data_metric = data.pivot_table(values='metric', index=['location', 'x', 'y'], columns='ts').reset_index()

    data_adj = data.pivot_table(values='adj', index='location', columns='ts').reset_index()

    data_final = data_metric.merge(data_adj, on='location', how='left', suffixes=('_metric', '_adj'))

    return data_final



def world_map() :

    # Pull COVID data into dataframe """
    cols = ['location', 'date', 'positive_rate', 'new_deaths_smoothed_per_million']

    filename = 'https://raw.githubusercontent.com/owid/covid-19-data/master/public/data/owid-covid-data.csv'
    world_covid_data_all = pd.read_csv(filename, usecols=cols)

    # Change date column to datetime, sort in date order, create timestamp column
    world_covid_data_all['date'] = pd.to_datetime(world_covid_data_all['date'])
    world_covid_data_all = world_covid_data_all.sort_values('date', ascending=False)
    world_covid_data_all['ts'] = world_covid_data_all['date'].values.astype(np.int64) / 1000000

    # Turn positive rate into readable %
    world_covid_data_all['positive_rate'] = world_covid_data_all['positive_rate'] * 100

    # Create individual dfs
    positive = create_world_df(world_covid_data_all, 'positive_rate', 3)
    deaths_pm = create_world_df(world_covid_data_all, 'new_deaths_smoothed_per_million', 15)

    # Create initial visible df
    max_ts = int(positive.columns[-1][0:-6])
    min_ts = int(positive.columns[3][0:-9])

    world_visible = positive[['location', 'x', 'y', str(max_ts)+'.0_metric', str(max_ts)+'.0_adj']].copy()
    world_visible.columns = ['location', 'x', 'y', 'metric', 'adj']

    # Create Sources
    source_positive = ColumnDataSource(positive)
    source_deaths_pm = ColumnDataSource(deaths_pm)

    source_available = ColumnDataSource(positive)
    source_visible = ColumnDataSource(world_visible)

    # Produce map
    world = x_range, y_range = ((-90, 90), (-8000000, 11500000))

    p = figure(
        title='World Map',
        plot_height=800,
        plot_width=1850,
        tools='pan, wheel_zoom, box_zoom, save, reset',
        x_range=x_range,
        y_range=y_range,
        x_axis_type='mercator',
        y_axis_type='mercator'
    )

    url = 'http://a.basemaps.cartocdn.com/rastertiles/voyager/{Z}/{X}/{Y}.png'
    attribution = 'Tiles by Carto, under CC by 3.0.  Data by OSM, under 0DbL.'

    p.add_tile(WMTSTileSource(url=url, attribution=attribution))

    p.circle(x='x',
             y='y',
             fill_color='firebrick',
             line_color='firebrick',
             size='adj',
             alpha=0.5,
             source=source_visible
            )

    p.add_tools(HoverTool(
        tooltips=[
            ( 'Country',   '@location' ),
            ( '#',  '@metric' ),
        ],

        formatters={
            'Country'      : 'printf',
            'Cases(pm)' : 'numeral',
        },

    ))

    # Create RadioButtonGroup
    LABELS = ['COVID Positive Test Rate', 'COVID Deaths Per Million']
    checkbox = RadioButtonGroup(labels=LABELS, active=0)

    # Create slider
    slider = DateSlider(title = "Date", value = max_ts, start = min_ts, end = max_ts, step = 86400000)
    slider1 = slider  # Required for checkbox callback

    # Create checkbox callback
    callback_checkbox = CustomJS(args=dict(source_visible=source_visible,
                                           source_available=source_available,
                                           source_deaths_pm=source_deaths_pm,
                                           source_positive=source_positive,
                                           slider=slider1),
                                 code="""
                                     var check = this.active;
                                     var slider = slider.value.toString();
                                     var data_visible = source_visible.data;
                                     var data_available = source_available.data;
                                     var data_positive = source_positive.data;
                                     var data_deaths_pm = source_deaths_pm.data;
                                     switch(check){
                                                    case 0 :
                                                        data_available = data_positive;
                                                        break;
                                                    case 1 :
                                                        data_available = data_deaths_pm;
                                                        break;
                                                    default :
                                                        alert('Default');
                                                        break;
                                                }
                                     data_visible['adj'] = data_available[slider + '.0_adj'];
                                     data_visible['metric'] = data_available[slider + '.0_metric'];
                                     source_visible.change.emit();
                                 """)

    # Create slider callback
    callback_slider = CustomJS(args=dict(source_visible=source_visible,
                                         source_available=source_available,
                                         slider = slider,
                                         checkbox=checkbox,
                                         source_positive=source_positive,
                                         source_deaths_pm=source_deaths_pm),
                                code="""
                                    var check = checkbox.active;
                                    var sli = slider.value.toString();
                                    var data_deaths_pm = source_deaths_pm.data;
                                    var data_positive = source_positive.data;
                                    var data_visible = source_visible.data;
                                    var data_available = source_available.data;
                                    switch(check){
                                                 case 0 :
                                                        data_available = data_positive;
                                                        break;
                                                    case 1 :
                                                        data_available = data_deaths_pm;
                                                        break;
                                                    default :
                                                        alert('Default');
                                                        break;
                                             }
                                    data_visible['adj'] = data_available[sli + '.0_adj'];
                                    data_visible['metric'] = data_available[sli + '.0_metric'];
                                    source_visible.change.emit();
                                """)

    # Call callbacks
    checkbox.js_on_change('active', callback_checkbox)
    slider.js_on_change('value', callback_slider)

    plot = column(checkbox, p, slider)

    script, div = components(plot)

    return script, div


app = Flask(__name__)

@app.route('/')
def index():

    script, div = grid_plot()

    map_script, map_div, region_covid_df = process_map_data()

    world_script, world_div = world_map()

    return render_template('index.html',
                            script=script,
                            div=div,
                            map_script=map_script,
                            map_div=map_div,
                            region_covid_df=region_covid_df,
                            world_script=world_script,
                            world_div=world_div
                            )


if __name__ == '__main__':
    app.run(debug=False)
